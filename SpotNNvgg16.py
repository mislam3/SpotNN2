# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Bt3h3w5yOsWca_JaB3zqalcz09UfASz

VGG16 model ver 2
fine tuned with Keras
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import keras
from keras import backend as k
#from tensorflow import keras
from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
from keras.layers.core import Dense, Flatten
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.optimizers import Adam
from keras.metrics import categorical_crossentropy
from keras.layers.convolutional import *
from matplotlib import pyplot as plt
# %matplotlib inline
from sklearn.metrics import confusion_matrix
import itertools
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras import Sequential
from keras.layers import Activation
import numpy as np
from glob import glob
import matplotlib.pyplot as plt
#from tensorflow.keras.layers import Conv2D, Flatten, MaxPooling2D, Dropout, BatchNormalization
from keras.layers import Conv2D, Flatten, MaxPooling2D, Dropout, BatchNormalization
from tensorflow.keras import layers





vgg16_model = keras.applications.vgg16.VGG16()
vgg16_model.summary()  # can work on 1000 different categories but need only 2 - need to modify the model for our purpose

# .model -transform into Sequential model(object)
type(vgg16_model)

model = Sequential() # model set to sequential object -currently model has no layers
# iterating over all layers within vgg16 model and adding those layers to the sequential model
# now we have a model of sequential type and don't need to work with functional API
# for layer in vgg16_model.layers:
#     model.add(layer)

# alternatively, iterating over all except last layer in vgg16, adding to seq model- no pop() required
for layer in vgg16_model.layers[:-1]:
  model.add(layer)

model.summary()

# model classifies images- 1 of 1000 categories, not what we want- need to take off the last predictions output dense layer- use pop()
# model.layers.pop()
# model.summary()


# no longer working on VGG16 model variable but the new model variable which is a sequential model
# setting the layers shown in summary to false to freeze/exclude in future training so the weights are not updated
# good for fine  tuning a model -don't need to update layer weights and keep them same
for layer in model.layers:
    layer.trainable = False

# instead of the last prediction layer that we popped off,
# a new dense layer is added to the model that classifies images to two categories -for 'empty' and 'occupied'
model.add(Dense(2, activation='softmax'))
model.summary()

"""---------------------------------------------------------------------------------------------------------------------------------------------

# Train the new vgg16 model
"""

